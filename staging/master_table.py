from __future__ import annotations
import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from scripts.paths import DATA_DIR
from utils.logging_setup import setup_logging
from utils.helpers import db_manager

# Configuration ----------------------------------------------------------------
load_dotenv()
setup_logging()
log = logging.getLogger(__name__)

STG_DB = Path(DATA_DIR, f"{os.environ['DUCKDB_STAGING_NAME']}.duckdb")

# SQL block --------------------------------------------------------------------
SQL_CREATE_MASTER_TABLE = """
CREATE OR REPLACE TABLE MASTER_TABLE AS
WITH ALL_CONTRIBUTORS AS (
    SELECT JIRA_REPORTER_NAME AS NAME, JIRA_REPORTER_ID AS ID, 'JIRA_REPORTER' AS ROLE, *
    FROM JIRA_GITHUB WHERE JIRA_REPORTER_NAME IS NOT NULL

    UNION ALL
    SELECT JIRA_CREATOR_NAME AS NAME, JIRA_CREATOR_ID AS ID, 'JIRA_CREATOR' AS ROLE, *
    FROM JIRA_GITHUB WHERE JIRA_CREATOR_NAME IS NOT NULL

    UNION ALL
    SELECT JIRA_ASSIGNEE_NAME AS NAME, JIRA_ASSIGNEE_ID AS ID, 'JIRA_ASSIGNEE' AS ROLE, *
    FROM JIRA_GITHUB WHERE JIRA_ASSIGNEE_NAME IS NOT NULL

    UNION ALL
    SELECT GH_AUTHOR_NAME AS NAME, GH_AUTHOR_ID AS ID, 'GH_AUTHOR' AS ROLE, *
    FROM JIRA_GITHUB WHERE GH_AUTHOR_NAME IS NOT NULL

    UNION ALL
    SELECT GH_COMMITTER_NAME AS NAME, GH_COMMITTER_ID AS ID, 'GH_COMMITTER' AS ROLE, *
    FROM JIRA_GITHUB WHERE GH_COMMITTER_NAME IS NOT NULL

    UNION ALL
    SELECT PR_USER_LOGIN AS NAME, PR_USER_ID AS ID, 'PR_USER' AS ROLE, *
    FROM JIRA_GITHUB WHERE PR_USER_LOGIN IS NOT NULL
),

GROUPED AS (
    SELECT
        TRIM(NAME) AS NAME,

        -- ID fields
        CASE
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_AUTHOR' THEN GH_AUTHOR_ID END))) = 0 THEN NULL
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_AUTHOR' THEN GH_AUTHOR_ID END))) = 1 THEN [ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_AUTHOR' THEN GH_AUTHOR_ID END))[1]]
            ELSE ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_AUTHOR' THEN GH_AUTHOR_ID END))
        END AS GH_AUTHOR_IDS,

        CASE
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_COMMITTER' THEN GH_COMMITTER_ID END))) = 0 THEN NULL
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_COMMITTER' THEN GH_COMMITTER_ID END))) = 1 THEN [ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_COMMITTER' THEN GH_COMMITTER_ID END))[1]]
            ELSE ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_COMMITTER' THEN GH_COMMITTER_ID END))
        END AS GH_COMMITTER_IDS,

        CASE
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_CREATOR' THEN JIRA_CREATOR_ID END))) = 0 THEN NULL
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_CREATOR' THEN JIRA_CREATOR_ID END))) = 1 THEN [ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_CREATOR' THEN JIRA_CREATOR_ID END))[1]]
            ELSE ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_CREATOR' THEN JIRA_CREATOR_ID END))
        END AS JIRA_CREATOR_IDS,

        CASE
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_REPORTER' THEN JIRA_REPORTER_ID END))) = 0 THEN NULL
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_REPORTER' THEN JIRA_REPORTER_ID END))) = 1 THEN [ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_REPORTER' THEN JIRA_REPORTER_ID END))[1]]
            ELSE ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_REPORTER' THEN JIRA_REPORTER_ID END))
        END AS JIRA_REPORTER_IDS,

        CASE
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_ASSIGNEE' THEN JIRA_ASSIGNEE_ID END))) = 0 THEN NULL
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_ASSIGNEE' THEN JIRA_ASSIGNEE_ID END))) = 1 THEN [ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_ASSIGNEE' THEN JIRA_ASSIGNEE_ID END))[1]]
            ELSE ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_ASSIGNEE' THEN JIRA_ASSIGNEE_ID END))
        END AS JIRA_ASSIGNEE_IDS,

        CASE
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'PR_USER' THEN PR_USER_ID END))) = 0 THEN NULL
            WHEN ARRAY_LENGTH(ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'PR_USER' THEN PR_USER_ID END))) = 1 THEN [ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'PR_USER' THEN PR_USER_ID END))[1]]
            ELSE ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'PR_USER' THEN PR_USER_ID END))
        END AS PR_USER_IDS,

        -- Role-specific story links
        ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_REPORTER' AND STORY_KEY IS NOT NULL THEN STORY_KEY END)) AS JIRA_REPORTED_STORIES,
        ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_CREATOR' AND STORY_KEY IS NOT NULL THEN STORY_KEY END)) AS JIRA_CREATED_STORIES,
        ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'JIRA_ASSIGNEE' AND STORY_KEY IS NOT NULL THEN STORY_KEY END)) AS JIRA_ASSIGNED_STORIES,
        ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_AUTHOR' AND STORY_KEY IS NOT NULL THEN STORY_KEY END)) AS GH_AUTHORED_STORIES,
        ARRAY_DISTINCT(LIST(CASE WHEN ROLE = 'GH_COMMITTER' AND STORY_KEY IS NOT NULL THEN STORY_KEY END)) AS GH_COMMITTED_STORIES,

        -- Role metadata
        ARRAY_DISTINCT(LIST(ROLE)) AS SOURCE_FIELDS,

        -- Aggregated across all roles
        ARRAY_DISTINCT(LIST(STORY_KEY)) AS STORY_KEYS,
        ARRAY_DISTINCT(LIST(PROJECT_KEY)) AS PROJECT_KEYS,
        ARRAY_DISTINCT(LIST(PROJECT_NAME)) AS PROJECT_NAMES,
        ARRAY_DISTINCT(LIST(REPO)) AS REPOS,
        ARRAY_DISTINCT(LIST(EPIC_KEY)) AS EPIC_KEYS,

        -- Emails
        ARRAY_DISTINCT(LIST(GH_AUTHOR_EMAIL)) AS GH_AUTHOR_EMAILS,
        ARRAY_DISTINCT(LIST(GH_COMMITTER_EMAIL)) AS GH_COMMITTER_EMAILS,
        ARRAY_DISTINCT(LIST(JIRA_REPORTER_EMAIL)) AS JIRA_REPORTER_EMAILS,
        ARRAY_DISTINCT(LIST(JIRA_CREATOR_EMAIL)) AS JIRA_CREATOR_EMAILS,
        ARRAY_DISTINCT(LIST(JIRA_ASSIGNEE_EMAIL)) AS JIRA_ASSIGNEE_EMAILS,

    FROM ALL_CONTRIBUTORS
    GROUP BY NAME
)
SELECT *
FROM GROUPED
ORDER BY NAME;
"""


# Runner -----------------------------------------------------------------------
def _execute(conn, sql: str, table: str) -> None:
    conn.execute(sql)
    n = conn.execute(f'SELECT COUNT(*) FROM "{table}"').fetchone()[0]
    log.info("%s refreshed â€” %d rows", table, n)


def main() -> None:
    with db_manager(STG_DB) as conn:
        _execute(conn, SQL_CREATE_MASTER_TABLE, "MASTER_TABLE")
        log.info("Pipeline complete.")


if __name__ == "__main__":
    main()
