knowledgebase_query: >
  Objective: Gather comprehensive schema information for user identity resolution.
  Task: Using your knowledge base, retrieve all relevant schema details (tables, columns, JSON structures, and their descriptions) for both GitHub and JIRA data sources that are critical for identifying users. Follow your detailed operational workflow and critical items checklist meticulously.

planner_query: >
  # Agent Task: SQL Plan Generation for User Identity Resolution

  ## High-level Data Goal:
  Devise a comprehensive data retrieval strategy to identify unique individuals by collecting all relevant user identification attributes from our GitHub and JIRA data sources. Pay close attention to strategies for efficiently sampling active users from large activity tables (e.g., using DISTINCT on user identifiers and appropriate LIMIT clauses).

  ## Core Directive:
  Based EXCLUSIVELY on the 'Provided Schema Information' (JSON block below) and the 'High-level Data Goal', you are to generate the 'SQLPlan' JSON object.

  You MUST use your `think` tool to meticulously follow your detailed operational workflow, including:
  1. Initial analysis of the goal and provided schema.
  2. Step-by-step construction of the plan components (TargetSchemas, ColumnSelections, hints) for both GitHub and JIRA.
  3. Verification of coverage against your 'Critical Tables & Columns to Plan For' list.
  4. Formulation of 'plan_summary' and 'strategy_notes' (including any schema gaps).
  Only after this comprehensive `think` process is complete should you output the final 'SQLPlan' JSON.

  ## Provided Schema Information (`KBInfo`):
    ```json
    {knowledgebase_info}
    ```

sql_constructor_query: >
  # Agent Task: Construct SQL Query Strings from Plan

  ## Role Reminder:
  You are an SQL Query String Constructor.

  ## Core Directive:
  Based on your detailed operational instructions and the 'SQLPlan' JSON object provided below, your sole task is to generate a list of precise, executable SQL SELECT query strings.

  ## Key Execution Requirements:
  - Each generated SQL query MUST correspond to a 'TargetSchema' entry in the input 'SQLPlan'.
  - You MUST meticulously apply all 'ColumnSelections' (using 'source_field' and 'alias') as specified in the plan.
  - You MUST accurately translate any 'table_query_hints' and 'platform_query_hints' into valid, generally ANSI-compliant SQL clauses. Adhere strictly to the plan; do not infer or add logic not present in the plan or your instructions.
  - Your output MUST be a single JSON object that strictly conforms to the 'SQLQueries' Pydantic model structure. This includes carrying forward the 'plan_summary' and 'strategy_notes' from the input 'SQLPlan'.

  ## Input SQLPlan:
    ```json
    {sql_plan_json}
    ```

sql_executor_query: >
  # Agent Task: SQL Query Execution

  ## Role Reminder:
  You are a SQL Query Execution Specialist.

  ## Core Directive:
  Your sole task is to execute the SQL query string provided within the 'sql_to_execute' field of the 'Input JSON' below. You MUST use your 'SQL execution tool' for this.

  ## Output Requirement:
  Your entire response MUST be a single JSON object that strictly conforms to the 'SQLExecutionResult' Pydantic model. The raw data rows returned by the 'SQL execution tool' must be placed into the 'rows' field of this model.

  ## Input JSON:
    ```json
    {sql_query_json}
    ```

identity_query: >
  # Agent Task: Comprehensive Identity Resolution

  ## Role Reminder:
  You are an expert Identity Resolution Analyst.

  ## Core Directive:
  Based on your detailed operational instructions (which require extensive use of the `think` tool for all planning, state management, decision-making, and reflection) and the 'AggregatedData' JSON object provided below, your sole task is to perform comprehensive identity resolution to identify unique individuals across GitHub and JIRA data.

  ## Key Operational Focus Areas (as detailed in your instructions):
  - Meticulous processing of all user records from 'sql_results'.
  - Careful parsing of direct user attributes and user details nested within JSON string columns.
  - Proactive scanning of text fields for cross-platform entity references (e.g., JIRA IDs in GitHub content) and using these as part of your matching strategy.
  - Systematic application of matching strategies (Unique IDs, Exact Emails, Cross-Platform Activity Links, Name/Login Similarity), prioritizing as guided by input 'strategy_notes' and your core instructions.
  - Accurate construction of 'Identity' and 'AccountInfo' objects.
  - Thorough handling of unresolved records and generation of a final resolution summary.

  ## Output Requirement:
  Your entire response MUST be a single JSON object that strictly conforms to the 'IdentityList' Pydantic model structure.

  ## Input AggregatedData:
    ```json
    {aggregated_data_json}
    ```
