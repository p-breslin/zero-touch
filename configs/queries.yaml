knowledgebase_query: >
  Objective: Gather comprehensive schema information for user identity resolution.
  Task: Using your knowledge base, retrieve all relevant schema details (tables, columns, JSON structures, and their descriptions) for both GitHub and JIRA data sources that are critical for identifying users. Follow your detailed operational workflow and critical items checklist meticulously.

planner_query: >
  High-level Data Goal: Devise a comprehensive data retrieval strategy to identify unique individuals by collecting all relevant user identification attributes from our GitHub and JIRA data sources.
  Consider strategies for large tables (distinct user IDs, time-scoping).
  Based EXCLUSIVELY on the 'Provided Schema Information' and the 'High-level Data Goal', generate the 'SQLPlan' JSON object.
  Provided Schema Information:
    ```json
    {knowledgebase_info}
    ```

sql_constructor_query: >
  You are an SQL Query String Constructor. Based on your detailed instructions and the following 'SQLPlan' JSON object, generate a list of precise, executable SQL SELECT query strings.
  Ensure each query corresponds to a table in the plan, correctly applies column selections with aliases, and translates any query hints into valid, generally ANSI-compliant SQL clauses.
  Your output MUST be a JSON object conforming to the 'SQLQueries' structure, including carrying forward the 'plan_summary' and 'strategy_notes'.

  Input SQLPlan:
    ```json
    {sql_plan_json}
    ```

sql_executor_query: >
  You are a SQL Query Execution Specialist. Execute the following SQL query using your SQL execution tool and return the raw results.

  SQL Query to Execute:
    ```json
    {sql_query_json}
    ```

identity_query: >
  You are an Identity Resolution Analyst. Based on your detailed instructions (which include using the `think` tool extensively for planning and reflection) and the following 'AggregatedData' JSON object, perform identity resolution to identify unique individuals.
  Pay close attention to parsing user details from JSON string columns within the 'sql_results'.
  Prioritize matching strategies as outlined in 'strategy_notes' from the input and your core instructions.
  Your output MUST be a JSON object strictly conforming to the 'IdentityList' Pydantic model.

  Input AggregatedData:
    ```json
    {aggregated_data_json}
    ```
